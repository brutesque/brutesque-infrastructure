---

- name: Set swarm labels
  hosts: managers[0]
  vars_files:
    - vars/main.yml
  tasks:
    - name: Get info on all nodes
      docker_node_info:
      register: result
    - name: Add labels to nodes
      docker_node:
        hostname: "{{ item.Description.Hostname }}"
        labels: "{{ hostvars[item.Description.Hostname]['swarm_labels'] |default({}) }}"
      loop: "{{ result['nodes'] }}"
      no_log: true
  tags: labels

- name: Mount the BigStorage disk
  hosts: storage
  become: true
  tasks:
    - name: Mount big storage device
      mount:
        path: "/mnt/storage"
        src: "/dev/{{ storage_device }}"
        fstype: xfs
        opts: defaults
        state: mounted
      when: storage_device is defined
  tags: storage

- name: Deploy private registry
  hosts: managers[0]
  vars_files:
    - vars/main.yml
  tasks:
    - file:
        state: directory
        path: /opt/stacks/registry
        mode: '0600'
    - copy:
        src: registry.stack.yml
        dest: /opt/stacks/registry/docker-compose.yml
        mode: '0600'
    - docker_stack:
        state: present
        name: registry
        compose:
          - /opt/stacks/registry/docker-compose.yml
      environment:
        DOMAIN: "apps.{{ domain }}"
        REGISTRY_TITLE: "{{ domain }}"
        REGISTRY_HTTP_SECRET: "{{ domain | hash('sha1') | truncate(10, True, '') }}"
  tags: registry

- name: Log into private registry and force re-authorization
  hosts: swarm
  vars_files:
    - vars/main.yml
  tasks:
    - name: wait for registry to come up
      uri:
        validate_certs: no
        method: GET
        url: "https://registry.apps.{{ domain }}"
        status_code: 401
      register: result
      until: result.status == 401
      retries: 60
      delay: 5
    - name: login to registry
      docker_login:
        registry: "registry.apps.{{ domain }}"
        username: "admin"
        password: "{{ admin_password }}"
      changed_when: false
  tags: registry

- name: Deploy pihole
  hosts: managers[0]
  vars_files:
    - vars/main.yml
  tasks:
    - name: Disable the resolved service
      systemd:
        state: stopped
        enabled: no
        name: systemd-resolved
      when: swarm_labels['lan-dns'] is defined and swarm_labels['lan-dns'] == 'true'

    - name: update resolv.conf
      lineinfile:
        path: '/etc/resolv.conf'
        state: present
        regexp: '^nameserver '
        line: 'nameserver 1.1.1.2'
      when: swarm_labels['lan-dns'] is defined and swarm_labels['lan-dns'] == 'true'

    - name: Create network for other services to access the lan dns service
      docker_network:
        state: present
        name: pihole-network
        scope: swarm
        driver: overlay
        attachable: yes
      when: swarm_labels['lan-dns'] is defined and swarm_labels['lan-dns'] == 'true'

    - file: state=directory path=/opt/stacks/pihole/configs
      when: swarm_labels['lan-dns'] is defined and swarm_labels['lan-dns'] == 'true'
    - file: state=directory path=/opt/stacks/pihole/secrets
      when: swarm_labels['lan-dns'] is defined and swarm_labels['lan-dns'] == 'true'

    - copy:
        src: secrets/custom.list
        dest: /opt/stacks/pihole/secrets/custom.list
      when: swarm_labels['lan-dns'] is defined and swarm_labels['lan-dns'] == 'true'

    - copy:
        src: pihole.stack.yml
        dest: /opt/stacks/pihole/docker-compose.yml
      when: swarm_labels['lan-dns'] is defined and swarm_labels['lan-dns'] == 'true'
    - docker_stack:
        state: present
        name: pihole
        compose:
          - /opt/stacks/pihole/docker-compose.yml
      environment:
        DOMAIN: "apps.{{ domain }}"
        WEBPASSWORD: "{{ admin_password }}"
        SERVERIP: "{{ hostvars[inventory_hostname]['ansible_' + lan_interface]['ipv4']['address'] }}"
      when: swarm_labels['lan-dns'] is defined and swarm_labels['lan-dns'] == 'true'
  tags: pihole

- name: Deploy vpn
  hosts: managers[0]
  tasks:
    - file: state=directory path=/opt/stacks/vpn/secrets

    - copy:
        src: secrets/vpn.env
        dest: /opt/stacks/vpn/secrets/vpn.env

    - copy:
        src: vpn.compose.yml
        dest: /opt/stacks/vpn/docker-compose.yml
    - shell:
        cmd: docker-compose --project-name lan --file docker-compose.yml up -d
        chdir: /opt/stacks/vpn
  tags: vpn

- name: Deploy timemachine
  hosts: managers[0]
  vars_files:
    - vars/main.yml
  tasks:
    - file: state=directory path=/opt/stacks/timemachine/secrets
    - file: state=directory path=/opt/stacks/timemachine/configs/users
    - file: state=directory path=/mnt/storage/timemachine

    - template:
        src: configs/timemachine-user.conf.j2
        dest: "/opt/stacks/timemachine/configs/users/{{ create_user }}.conf"
    - copy:
        src: timemachine.stack.yml
        dest: /opt/stacks/timemachine/docker-compose.yml

    - docker_stack:
        state: present
        name: timemachine
        compose:
          - /opt/stacks/timemachine/docker-compose.yml
  tags: timemachine


- name: Deploy resilio-sync
  hosts: managers[0]
  vars_files:
    - vars/main.yml
  tasks:

    - name: Create an empty file to store the first deployment timestamp
      copy:
        content: ""
        dest: "/opt/hello"
        force: no
    - name: Get the first deployment timestamp
      shell: "stat --format '%Y' /opt/hello"
      register: filetime_result
    - name: Do ssh keyscan on ansible host
      shell: "cat /etc/ssh/ssh_host_ed25519_key.pub | ssh-keygen -l -f - | grep ED25519"
      register: keyscan_result
      until: keyscan_result.rc == 0
      retries: 10
      delay: 60
    - name: Set fingerprint for ansible host
      set_fact:
        fingerprint: "{{ keyscan_result.stdout.split(' ')[1] }}"
    - name: Create admin password hash for stack
      set_fact:
        admin_password_salt: "{{ ['resilio', fingerprint, filetime_result.stdout] | join('|') | hash('sha1') | truncate(15, True, '') + '.' }}"
    - name: Create admin password hash for stack
      set_fact:
        admin_password_hash: "{{ admin_password | password_hash('sha512', rounds=999999, salt=admin_password_salt) }}"

    - file: state=directory path=/opt/stacks/resilio/configs
    - file: state=directory path=/opt/stacks/resilio/secrets
    - file: state=directory path=/mnt/storage/sync

    - copy:
        src: secrets/Sync_Pro_License.btskey
        dest: /opt/stacks/resilio/secrets/Sync_Pro_License.btskey
    - template:
        src: configs/sync.conf.j2
        dest: /opt/stacks/resilio/configs/sync.conf

    - copy:
        src: resilio-sync.stack.yml
        dest: /opt/stacks/resilio/docker-compose.yml
    - docker_stack:
        state: present
        name: resilio
        compose:
          - /opt/stacks/resilio/docker-compose.yml
      environment:
        DOMAIN: "apps.{{ domain }}"
  tags: resilio

- name: Fix some common Resilio Sync issues
  hosts: swarm
  vars_files:
    - vars/main.yml
  tasks:
    - name: Get StreamsList file of every sync folder
      find:
        path: /mnt/storage/sync
        file_type: file
        patterns: 'StreamsList'
        recurse: true
        depth: 3
      register: files_matched
      when: swarm_labels['resilio.node-nr']
    - name: Comment out com.apple.ResourceFork for every sync folder
      lineinfile:
        path: "{{ item.path }}"
        state: present
        regexp: '^com.apple.ResourceFork'
        line: '#com.apple.ResourceFork'
      loop: "{{ files_matched.files }}"
      when: swarm_labels['resilio.node-nr']

    - name: Make sure sync agent can have enough system notify watchers  # https://connect.resilio.com/hc/en-us/articles/360011329820
      lineinfile:
        path: '/etc/sysctl.conf'
        state: present
        regexp: '^fs.inotify.max_user_watches='
        line: 'fs.inotify.max_user_watches=1048576'
      when: swarm_labels['resilio.node-nr']
    - name: Make sure sync agent can have enough system notify watchers  # https://connect.resilio.com/hc/en-us/articles/360011329820
      shell:
        cmd: 'sysctl fs.inotify.max_user_watches=1048576'
      when: swarm_labels['resilio.node-nr']
    - name: Make sure sync agent can have enough system notify watchers  # https://connect.resilio.com/hc/en-us/articles/360011329820
      shell:
        cmd: 'sysctl -p'
      when: swarm_labels['resilio.node-nr']
  tags: resilio
